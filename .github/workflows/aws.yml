name: Build and upload to S3

on: push
      
jobs:
  run-and-upload:
    name: Build and upload to S3
    
    runs-on: self-hosted

    strategy:
      matrix:
        mode: [DEBUG, RELEASE]
        
    env:
      PYTHON_VERSION: '3.12'
      PROJECT_NAME: ${{ github.event.repository.name }}
      MODE: ${{ matrix.mode }}
      BUILD_REPO_NAME: ${{ github.event.repository.name }}/${{ github.sha }}/${{ matrix.mode }}
      AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      PREFIX: ''
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build ${{ env.PROJECT_NAME }} ${{ env.MODE }}
        run: |
          python build.py ${{ env.BUILD_REPO_NAME }} ${{ env.MODE }}
          
      - name: Get commit message
        id: get_commit
        run: echo "COMMIT_MESSAGE=$(git log -1 --pretty=%B)" >> $GITHUB_ENV
      
      - name: Upload to S3
        env:
          UPLOAD_REPO_NAME: ${{ github.event.repository.name }}/${{ env.COMMIT_MESSAGE }}/${{ matrix.mode }}

        if: success()
        run: |
          zip -r ${{ env.BUILD_REPO_NAME }}.zip -j ${{ env.BUILD_REPO_NAME }}
          aws s3 cp ${{ env.BUILD_REPO_NAME }}.zip s3://${{ env.AWS_BUCKET_NAME }}/${{ env.UPLOAD_REPO_NAME }}.zip --region ${{ env.AWS_REGION }}
        
      - name: Cleaning up
        run: |
          rm -r -f ${{ env.BUILD_REPO_NAME }}

      - name: Clean old builds from S3
        if: success()
        run: |
          echo "Listing all folders in s3://${{ env.AWS_BUCKET_NAME }}/${{ env.PROJECT_NAME }}/"
          folders=$(aws s3api list-objects-v2 --bucket ${{ env.AWS_BUCKET_NAME }} --prefix ${{ env.PROJECT_NAME }}/ --delimiter '/' --query 'CommonPrefixes[*].Prefix' --output text)
          echo "All folders: $folders"
          folder_array=($folders)
          echo "Total folders: ${#folder_array[@]}"
          if [ ${#folder_array[@]} -le 2 ]; then
            echo "Less than 3 folders found, no folders deleted"
            exit 0
          fi
          folders_to_delete=$(aws s3api list-objects-v2 --bucket ${{ env.AWS_BUCKET_NAME }} --prefix ${{ env.PROJECT_NAME }}/ --delimiter '/' --query 'CommonPrefixes[2:].Prefix' --output text)
          echo "Folders to delete: $folders_to_delete"
          for folder in $folders_to_delete; do
            echo "Deleting folder: $folder"
            aws s3 rm s3://${{ env.AWS_BUCKET_NAME }}/$folder --recursive
          done
