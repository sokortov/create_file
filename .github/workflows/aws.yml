name: Build and upload to S3

on: push
      
jobs:
  run-and-upload:
    name: Build and upload to S3
    
    runs-on: self-hosted

    strategy:
      matrix:
        mode: [DEBUG, RELEASE]
        
    env:
      PYTHON_VERSION: '3.12'
      PROJECT_NAME: ${{ github.event.repository.name }}
      MODE: ${{ matrix.mode }}
      BUILD_REPO: ${{ matrix.mode }}
      AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      UPLOAD_REPO: ${{ github.event.repository.name }}/${{ github.run_number }}/${{ matrix.mode }}
      OLD_BUILDS_TO_KEEP: 2
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build ${{ env.PROJECT_NAME }} ${{ env.MODE }}
        run: |
          python build.py ${{ env.BUILD_REPO }} ${{ env.MODE }}
         
      - name: Upload to S3
        if: success()
        run: |
          (cd ${{ env.BUILD_REPO }} && zip -r "$OLDPWD/${{ env.BUILD_REPO }}.zip" .)
          aws s3 cp ${{ env.BUILD_REPO }}.zip s3://${{ env.AWS_BUCKET_NAME }}/${{ env.UPLOAD_REPO }}.zip --region ${{ env.AWS_REGION }}
          
      - name: Clean up working folder
        run: |
          rm -r -f ${{ env.BUILD_REPO }}
          rm -f ${{ env.BUILD_REPO }}.zip

      - name: Clean old builds from S3
        if: success()
        run: |

          set -e  # Выходить из скрипта при возникновении ошибки
          set -x  # Выводить команды перед их выполнением

          folder_list=$(aws s3api list-objects-v2 --bucket ${{ env.AWS_BUCKET_NAME }} --prefix ${{ env.PROJECT_NAME }}/ --delimiter '/' --query 'CommonPrefixes[*].Prefix' --output text)

          # Удаляем строку, содержащую "taged" с помощью grep
          folder_list=$(echo "$folder_list" | grep -v '/create_file\/tagged\//')

          echo "$folder_list"  # Выводим результат для отладки
          
          folders_with_dates=$(for folder in $folder_list; do echo "$(aws s3 ls s3://${{ env.AWS_BUCKET_NAME }}/$folder --recursive | sort | tail -n 1) $folder"; done)
          sorted_folders=$(echo "$folders_with_dates" | sort | awk '{print $NF}')
          folder_array=($sorted_folders)
          folders_to_delete=("${folder_array[@]:0:${#folder_array[@]}-${{ env.OLD_BUILDS_TO_KEEP }}}")
          
          for folder in "${folders_to_delete[@]}"; do
            aws s3 rm "s3://${{ env.AWS_BUCKET_NAME }}/$folder" --recursive
          done
